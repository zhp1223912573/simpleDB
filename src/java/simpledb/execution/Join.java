package simpledb.execution;

import simpledb.storage.TupleIterator;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 * 相连操作 保存连接的两个关系的迭代器，以及连接谓语 ，还有两者合并后的元组描述符，用来返回连接后新的元组
 * 与filter类中相似，同样使用元组集合保存符合谓语的所有新元组，并保持其迭代器。
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    //相连俩关系的迭代器
    private OpIterator child1;
    private OpIterator child2;
    //连接谓语
    private JoinPredicate joinPredicate;
    //元组描述符
    private TupleDesc tupleDesc;
    //元组集合迭代器
    private Iterator<Tuple> iterator;
    //元组集合
    private List<Tuple> tuples;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.child1 = child1;
        this.child2 = child2;
        this.joinPredicate = p;
        //合并child1和child2的元组描述符 (来自下面的gettupleDesc()的提示）
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
        tuples=new ArrayList<>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        //要进行连接的属性的索引
        int index = joinPredicate.getField1();
        return child1.getTupleDesc().getFieldName(index);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int index = joinPredicate.getField2();
        return child2.getTupleDesc().getFieldName(index);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        Tuple tuple=null;
        //使用简单的内置循环找出符合条件的两个元组，将两个元组合并如元组集合 后面可以尝试改为内置块循环
        while(child1.hasNext()){
            Tuple next1 = child1.next();
            while(child2.hasNext()){
                Tuple next2 = child2.next();
                //System.out.println(next2);
                if(joinPredicate.filter(next1,next2)){
                    tuple = new Tuple(tupleDesc);
                    for(int i=0;i<tupleDesc.numFields();i++){
                        if(i<next1.getTupleDesc().numFields()){
                            tuple.setField(i, next1.getField(i));
                        }else{
                            tuple.setField(i, next2.getField(i-next1.getTupleDesc().numFields()));
                        }
                    }
                    tuples.add(tuple);
                }
            }
            //这段代码十分重要 如果不加入使child2重置 会导致无法对两个关系的所有元组进行join比较并连接
            //因为child2已经到达了最后一个元素 所以不论外围循环还有多少次内层循环都直接终止！！！
            child2.rewind();
            //System.out.println(child2);
        }
        iterator=tuples.iterator();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        iterator = tuples.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        Tuple tuple = null;
        if (iterator!=null&&iterator.hasNext()){
            tuple=iterator.next();
        }
         return tuple;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        child1=children[0];
        child2=children[1];
    }

}
